<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions.Json</name>
    </assembly>
    <members>
        <member name="M:FluentAssertions.Json.Common.StringExtensions.EscapePlaceholders(System.String)">
            <summary>
            Replaces all characters that might conflict with formatting placeholders with their escaped counterparts.
            </summary>
        </member>
        <member name="T:FluentAssertions.Json.IJsonAssertionOptions`1">
            <summary>
            Provides the run-time details of the <see cref="T:FluentAssertions.Json.JsonAssertionOptions`1" /> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.IJsonAssertionOptions`1.Using``1(System.Action{FluentAssertions.Equivalency.IAssertionContext{``0}})">
            <summary>
            Overrides the comparison of subject and expectation to use provided <paramref name="action" />
            when the predicate is met.
            </summary>
            <param name="action">
            The assertion to execute when the predicate is met.
            </param>
        </member>
        <member name="T:FluentAssertions.Json.IJsonAssertionRestriction`2">
            <summary>
            Defines additional overrides when used with <see cref="T:FluentAssertions.Json.JsonAssertionRestriction`2" />
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.IJsonAssertionRestriction`2.WhenTypeIs``1">
            <summary>
            Allows overriding the way structural equality is applied to (nested) objects of type
            <typeparamref name="TMemberType" />
            </summary>
        </member>
        <member name="T:FluentAssertions.Json.JsonAssertionExtensions">
            <summary>
                Contains extension methods for JToken assertions.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JsonAssertionExtensions.Should(Newtonsoft.Json.Linq.JToken)">
            <summary>
                Returns an <see cref="T:FluentAssertions.Json.JTokenAssertions"/> object that can be used to assert the current <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JsonAssertionExtensions.Should(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Returns an <see cref="T:FluentAssertions.Json.JTokenAssertions"/> object that can be used to assert the current <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JsonAssertionExtensions.Should(Newtonsoft.Json.Linq.JValue)">
            <summary>
                Returns an <see cref="T:FluentAssertions.Json.JTokenAssertions"/> object that can be used to assert the current <see cref="T:Newtonsoft.Json.Linq.JValue"/>.
            </summary>
        </member>
        <member name="T:FluentAssertions.Json.JsonAssertionOptions`1">
            <summary>
            Represents the run-time type-specific behavior of a JSON structural equivalency assertion. It is the equivalent of <see cref="!:FluentAssertions.Equivalency.EquivalencyAssertionOptions&lt;T&gt;"/>
            </summary>
        </member>
        <member name="T:FluentAssertions.Json.JTokenAssertions">
            <summary>
                Contains a number of methods to assert that an <see cref="T:Newtonsoft.Json.Linq.JToken" /> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.#ctor(Newtonsoft.Json.Linq.JToken,FluentAssertions.Execution.AssertionChain)">
            <summary>
                Initializes a new instance of the <see cref="T:FluentAssertions.Json.JTokenAssertions" /> class.
            </summary>
            <param name="subject">The subject</param>
            <param name="orCreate"></param>
        </member>
        <member name="P:FluentAssertions.Json.JTokenAssertions.Identifier">
            <summary>
                Returns the type of the subject the assertion applies on.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.BeEquivalentTo(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> is equivalent to the parsed <paramref name="expected" /> JSON,
                using an equivalent of <see cref="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />.
            </summary>
            <param name="expected">The string representation of the expected element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.BeEquivalentTo(Newtonsoft.Json.Linq.JToken,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> is equivalent to the <paramref name="expected" /> element,
                using an equivalent of <see cref="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />.
            </summary>
            <param name="expected">The expected element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.BeEquivalentTo(Newtonsoft.Json.Linq.JToken,System.Func{FluentAssertions.Json.IJsonAssertionOptions{System.Object},FluentAssertions.Json.IJsonAssertionOptions{System.Object}},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> is equivalent to the <paramref name="expected" /> element,
                using an equivalent of <see cref="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />.
            </summary>
            <param name="expected">The expected element</param>
            <param name="config">The options to consider while asserting values</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.NotBeEquivalentTo(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> is not equivalent to the parsed <paramref name="unexpected" /> JSON,
                using an equivalent of <see cref="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />.
            </summary>
            <param name="unexpected">The string representation of the unexpected element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.NotBeEquivalentTo(Newtonsoft.Json.Linq.JToken,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> is not equivalent to the <paramref name="unexpected" /> element,
                using an equivalent of <see cref="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />.
            </summary>
            <param name="unexpected">The unexpected element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.HaveValue(System.String)">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> has the specified <paramref name="expected" /> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.HaveValue(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> has the specified <paramref name="expected" /> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.NotHaveValue(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> does not have the specified <paramref name="unexpected" /> value.
            </summary>
            <param name="unexpected">The unexpected element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.MatchRegex(System.String)">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> matches the specified <paramref name="regularExpression" /> regular expression pattern.
            </summary>
            <param name="regularExpression">The expected regular expression pattern</param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.MatchRegex(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> matches the specified <paramref name="regularExpression" /> regular expression pattern.
            </summary>
            <param name="regularExpression">The expected regular expression pattern</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.NotMatchRegex(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> does not match the specified <paramref name="regularExpression" /> regular expression pattern.
            </summary>
            <param name="regularExpression">The expected regular expression pattern</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.HaveElement(System.String)">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> has a direct child element with the specified
                <paramref name="expected" /> name.
            </summary>
            <param name="expected">The name of the expected child element</param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.HaveElement(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> has a direct child element with the specified
                <paramref name="expected" /> name.
            </summary>
            <param name="expected">The name of the expected child element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.NotHaveElement(System.String,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> does not have a direct child element with the specified
                <paramref name="unexpected" /> name.
            </summary>
            <param name="unexpected">The name of the not expected child element</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.ContainSingleItem(System.String,System.Object[])">
            <summary>
            Expects the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to contain only a single item.
            </summary>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.HaveCount(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> matches the supplied <paramref name="expected" /> amount.
            </summary>
            <param name="expected">The expected number of items in the current <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.ContainSubtree(System.String,System.String,System.Object[])">
            <summary>
            Recursively asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> contains at least the properties or elements of the specified <paramref name="subtree"/>.
            </summary>
            <param name="subtree">The subtree to search for</param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
            <remarks>Use this method to match the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> against an arbitrary subtree,
            permitting it to contain any additional properties or elements. This way we can test multiple properties on a <see cref="T:Newtonsoft.Json.Linq.JObject"/> at once,
            or test if a <see cref="T:Newtonsoft.Json.Linq.JArray"/> contains any items that match a set of properties, assert that a JSON document has a given shape, etc. </remarks>
            <example>
            This example asserts the values of multiple properties of a child object within a JSON document.
            <code>
            var json = JToken.Parse("{ success: true, data: { id: 123, type: 'my-type', name: 'Noone' } }");
            json.Should().ContainSubtree(JToken.Parse("{ success: true, data: { type: 'my-type', name: 'Noone' } }"));
            </code>
            </example>
            <example>This example asserts that a <see cref="T:Newtonsoft.Json.Linq.JArray"/> within a <see cref="T:Newtonsoft.Json.Linq.JObject"/> has at least one element with at least the given properties</example>
            <code>
            var json = JToken.Parse("{ id: 1, items: [ { id: 2, type: 'my-type', name: 'Alpha' }, { id: 3, type: 'other-type', name: 'Bravo' } ] }");
            json.Should().ContainSubtree(JToken.Parse("{ items: [ { type: 'my-type', name: 'Alpha' } ] }"));
            </code>
        </member>
        <member name="M:FluentAssertions.Json.JTokenAssertions.ContainSubtree(Newtonsoft.Json.Linq.JToken,System.String,System.Object[])">
            <summary>
            Recursively asserts that the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> contains at least the properties or elements of the specified <paramref name="subtree"/>.
            </summary>
            <param name="subtree">The subtree to search for</param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
            <remarks>Use this method to match the current <see cref="T:Newtonsoft.Json.Linq.JToken"/> against an arbitrary subtree,
            permitting it to contain any additional properties or elements. This way we can test multiple properties on a <see cref="T:Newtonsoft.Json.Linq.JObject"/> at once,
            or test if a <see cref="T:Newtonsoft.Json.Linq.JArray"/> contains any items that match a set of properties, assert that a JSON document has a given shape, etc. </remarks>
            <example>
            This example asserts the values of multiple properties of a child object within a JSON document.
            <code>
            var json = JToken.Parse("{ success: true, data: { id: 123, type: 'my-type', name: 'Noone' } }");
            json.Should().ContainSubtree(JToken.Parse("{ success: true, data: { type: 'my-type', name: 'Noone' } }"));
            </code>
            </example>
            <example>This example asserts that a <see cref="T:Newtonsoft.Json.Linq.JArray"/> within a <see cref="T:Newtonsoft.Json.Linq.JObject"/> has at least one element with at least the given properties</example>
            <code>
            var json = JToken.Parse("{ id: 1, items: [ { id: 2, type: 'my-type', name: 'Alpha' }, { id: 3, type: 'other-type', name: 'Bravo' } ] }");
            json.Should().ContainSubtree(JToken.Parse("{ items: [ { type: 'my-type', name: 'Alpha' } ] }"));
            </code>
        </member>
        <member name="T:FluentAssertions.Json.JTokenFormatter">
            <summary>
            A <see cref="T:FluentAssertions.Formatting.IValueFormatter"/> for <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.JTokenFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:FluentAssertions.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:FluentAssertions.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FluentAssertions.Json.ObjectAssertionsExtensions">
            <summary>
                Contains extension methods for JSON serialization assertion methods
            </summary>
        </member>
        <member name="M:FluentAssertions.Json.ObjectAssertionsExtensions.BeJsonSerializable(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])">
            <summary>
            Asserts that an object can be serialized and deserialized using the JSON serializer and that it still retains
            the values of all members.
            </summary>
            <param name="assertions"></param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.ObjectAssertionsExtensions.BeJsonSerializable``1(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])">
            <summary>
            Asserts that an object can be serialized and deserialized using the JSON serializer and that it stills retains
            the values of all members.
            </summary>
            <param name="assertions"></param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Json.ObjectAssertionsExtensions.BeJsonSerializable``1(FluentAssertions.Primitives.ObjectAssertions,System.Func{FluentAssertions.Equivalency.EquivalencyOptions{``0},FluentAssertions.Equivalency.EquivalencyOptions{``0}},System.String,System.Object[])">
            <summary>
            Asserts that an object can be serialized and deserialized using the JSON serializer and that it stills retains
            the values of all members.
            </summary>
            <param name="assertions"></param>
            <param name="options"></param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see cref="!:because" />.
            </param>
        </member>
    </members>
</doc>
